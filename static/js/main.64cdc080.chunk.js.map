{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","containers/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["components_Card","_a","name","email","id","react","className","alt","src","components_CardList","robots","map","user","i","key","components_SearchBox","searchChange","type","placeholder","onChange","components_Scroll","props","style","overflow","border","height","children","src_containers_App","_super","App","_this","call","this","onSearchChange","event","setState","searchfield","currentTarget","value","state","__extends","prototype","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","robot","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","document","getElementById","URL","toString","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.64cdc080.chunk.js","sourcesContent":["import * as React from 'react'\n\ninterface CardProps { // could be used with IRobot too\n    name: string,\n    email: string,\n    id: number\n}\n\nconst Card: React.SFC<CardProps> = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import * as React from 'react'\nimport Card from './Card'\nimport {IRobot} from \"../containers/App\"\n\nconst CardList = ({ robots }: {robots: Array<IRobot>}) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList","import * as React from 'react'\n\ninterface SearchBoxProps {\n    // searchChange: (event) => void\n    searchChange(event: React.SyntheticEvent<HTMLInputElement>): void\n}\n\nconst SearchBox = ({ searchChange }: SearchBoxProps) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox","import * as React from 'react'\n\ntype Props = {\n  // children: any\n  children?: JSX.Element\n}\n\nconst Scroll = (props: Props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll","import * as React from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\nexport interface IRobot {\n  name: string\n  id: number\n  email: string\n}\n\ninterface IAppProps {\n}\n\ninterface IAppState {\n  robots: Array<IRobot>\n  searchfield: string\n}\n\nclass App extends React.Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props)\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount(): void {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})})\n  }\n\n  onSearchChange = (event: React.SyntheticEvent<HTMLInputElement>): void => {\n    this.setState({ searchfield: event.currentTarget.value })\n  }\n\n  render(): JSX.Element {\n    const { robots, searchfield } = this.state\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    return !robots.length ?\n      <h1>Loading...</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      )\n  }\n}\n\nexport default App","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './containers/App'\nimport registerServiceWorker from './registerServiceWorker'\nimport './index.css'\nimport 'tachyons'\n\nReactDOM.render( \n  <App />,\n  document.getElementById('root') as HTMLElement\n)\nregisterServiceWorker()\n"],"sourceRoot":""}